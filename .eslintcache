[{"C:\\Web\\ringle-chess\\src\\index.js":"1","C:\\Web\\ringle-chess\\src\\reportWebVitals.js":"2","C:\\Web\\ringle-chess\\src\\App.js":"3","C:\\Web\\ringle-chess\\src\\Test.js":"4"},{"size":478,"mtime":1607328593303,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":8577,"mtime":1607269938997,"results":"8","hashOfConfig":"6"},{"size":1169,"mtime":1607327874732,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15gf457",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Web\\ringle-chess\\src\\index.js",[],"C:\\Web\\ringle-chess\\src\\reportWebVitals.js",[],["20","21"],"C:\\Web\\ringle-chess\\src\\App.js",["22","23","24","25","26","27","28","29"],"import React, { Component } from 'react';\nimport './App.css';\n\nconst size = 70;\n\nclass App extends Component {\n\n  state = {\n    boardInput: 0,\n    pawnInput: 0,\n    pawnArrX: [],\n    pawnArrY: []\n  }\n\n\n  onInputChange = (type, e) => {\n    if (type === 'board') {\n      this.setState({ boardInput: e.target.value});\n      this.onDrawBoard(e.target.value);\n    }\n    else if (type === 'pawn') {\n      this.setState({ pawnInput: e.target.value, pawnArrX: [], pawnArrY: [] });\n      this.onAddPawn(e.target.value);\n    }\n  }\n\n  onDrawPawn = (pawn) => {\n\n    this.setState({ pawnArrX: [], pawnArrY: [] });\n    \n    for (var i = 0; i < pawn; i++) {\n      var pawnX = document.getElementById('pawnInput-' + i + '-0').value;\n      var pawnY = document.getElementById('pawnInput-' + i + '-1').value;\n\n      if (pawnX === '') {\n        document.getElementById('pawnInput-' + i + '-0').value = 0;\n        pawnX = 0;\n      }\n      if (pawnY === '') {\n        document.getElementById('pawnInput-' + i + '-1').value = 0;\n        pawnY = 0;\n      }\n\n      var joinedX = this.state.pawnArrX.concat(Number(pawnX));\n      var joinedY = this.state.pawnArrY.concat(Number(pawnY));\n\n      this.setState({ pawnArrX: joinedX, pawnArrY: joinedY });\n    }\n\n    this.onDrawBoard(this.state.boardInput, this.state.pawnArrX, this.state.pawnArrY);\n  }\n\n  onAddPawn = (pawn) => {\n\n    var pawnDiv = document.getElementById('pawnDiv');\n\n    // remove all child before rendering new pawns\n    while (pawnDiv.hasChildNodes()) {\n      pawnDiv.removeChild(pawnDiv.lastChild);\n    }\n\n    var pawnDesc = document.createElement('span');\n    pawnDesc.setAttribute('class', 'title');\n    pawnDesc.innerText = 'Location (x, y)';\n    pawnDesc.setAttribute('style', 'margin-right: 10px');\n\n    pawnDiv.appendChild(pawnDesc);\n    \n    for (var i = 0; i < pawn; i++) {\n      var spanOpen = document.createElement('span');\n      spanOpen.innerText = '[';\n\n      var comma = document.createElement('span');\n      comma.innerText = ', ';\n\n      var spanClose = document.createElement('span');\n      spanClose.innerText = '] ';\n\n      var pawnInput1 = document.createElement('input');\n      pawnInput1.setAttribute('type', 'number');\n      pawnInput1.setAttribute('class', 'pawnInput');\n      pawnInput1.setAttribute('min', 0);\n      pawnInput1.setAttribute('max', this.state.boardInput - 1);\n      pawnInput1.setAttribute('id', 'pawnInput-' + i + '-0');\n\n      var pawnInput2 = document.createElement('input');\n      pawnInput2.setAttribute('type', 'number');\n      pawnInput2.setAttribute('class', 'pawnInput');\n      pawnInput1.setAttribute('min', 0);\n      pawnInput1.setAttribute('max', this.state.boardInput - 1);\n      pawnInput2.setAttribute('id', 'pawnInput-' + i + '-1');\n\n      pawnDiv.appendChild(spanOpen);\n      pawnDiv.appendChild(pawnInput1);\n      pawnDiv.appendChild(comma);\n      pawnDiv.appendChild(pawnInput2);\n      pawnDiv.appendChild(spanClose);\n    }\n\n    var pawnBtn = document.createElement('button');\n    pawnBtn.setAttribute('class', 'ui button pawnBtn');\n    pawnBtn.innerText = 'Add pawn';\n    pawnBtn.onclick = () => this.onDrawPawn(pawn);\n    // pawnBtn.onclick = () => this.onDrawBoard(this.state.boardInput);\n\n    pawnDiv.appendChild(pawnBtn);\n  }\n\n  onDrawBoard = (board, arrX, arrY) => {\n\n    var canvas = document.getElementById(\"board\");\n    var ctx = canvas.getContext(\"2d\");\n\n    canvas.width  = board * size;\n    canvas.height = board * size; \n\n    // board\n    for (var i = 0; i < board; i++) {\n\n      ctx.moveTo(0, size * i);\n      ctx.lineTo(size * board, size * i);\n\n      ctx.moveTo(size * i, 0);\n      ctx.lineTo(size * i, size * board);\n\n      // location\n      for (var j = 0; j <= board; j++) {\n\n        ctx.font = \"10px Noto Sans KR, sans-serif\";\n        ctx.fillText('(' + (j-1) + ', ' + i + ')', size * i + 25, size * j - 30);\n\n        // if (j === 0 && i === 0) ctx.fillRect(size * i, size * j, size, size);\n        // if (j === 1 && i === 2) ctx.fillRect(size * i, size * j, size, size);\n        // if (j === 2 && i === 3) ctx.fillRect(size * i, size * j, size, size);\n      }\n    }\n\n    // pawn\n    if (arrX !== undefined && arrY !== undefined) {\n      \n      document.getElementById('visualize').style.display = 'inline-block';\n      for (var n = 0; n < this.state.pawnInput; n++) {\n\n          if (arrX.length > 0 && arrY.length > 0) {\n            ctx.fillRect(size * arrY[n], size * arrX[n], size, size);\n          }\n        \n      }\n    }\n\n    ctx.moveTo(0, size * board);\n    ctx.lineTo(size * board, size * board);\n\n    ctx.moveTo(size * board, 0);\n    ctx.lineTo(size * board, size * board);\n\n    ctx.strokeStyle = \"#000000\";\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  }\n\n  onVisualClick = (arrX, arrY) => {\n\n    var total = [];\n    var start = [];\n    var end = [];\n\n    start.push(arrX[0], arrY[0]); // 노드 2개라고 가정\n    end.push(arrX[1], arrY[1]);\n\n    for (var i = 0; i < arrX.length - 1; i++) {\n\n      if (arrX[i] < arrX[i+1] && arrY[i] < arrY[i+1]) { \n        for (var n = arrX[i]; n <= arrX[i+1]; n++) {\n          for (var m = arrY[i]; m <= arrY[i+1]; m++) {\n            total.push([n, m]);\n          }\n        }\n      }\n      else if (arrX[i] < arrX[i+1] && arrY[i] > arrY[i+1]) { \n        for (var n = arrX[i]; n <= arrX[i+1]; n++) {\n          for (var m = arrY[i+1]; m <= arrY[i]; m++) {\n            total.push([n, m]);\n          }\n        }\n      }\n      else if (arrX[i] > arrX[i+1] && arrY[i] < arrY[i+1]) { \n        for (var n = arrX[i+1]; n <= arrX[i]; n++) {\n          for (var m = arrY[i]; m <= arrY[i+1]; m++) {\n            total.push([n, m]);\n          }\n        }\n      }\n      else if (arrX[i] > arrX[i+1] && arrY[i] > arrY[i+1]) { \n        for (var n = arrX[i+1]; n <= arrX[i]; n++) {\n          for (var m = arrY[i+1]; m <= arrY[i]; m++) {\n            total.push([n, m]);\n          }\n        }\n      }\n\n    }\n\n    this.AstarAlgorithm(total, start, end);\n\n  }\n\n  AstarAlgorithm = (total, start, end) => {\n\n    var totalArr = total;\n    var current = [];\n    var open = [];\n    var close = [];\n\n    var minmin = 0;\n\n    var execute;\n\n    for (var i = 0; i < totalArr.length; i++) {\n      if (totalArr[i][0] === start[0] && totalArr[i][1] === start[1]) {\n        totalArr.splice(i, 1);\n      }\n    }\n\n    current = start;\n    close.push(start);\n\n    // loop start\n    while (current !== end) {\n\n      for (var a = -1; a <= 1; a++) {\n        for (var b = -1; b <= 1; b++) {\n\n          for (var c = 0; c < totalArr.length; c++) {\n            if (totalArr[c][0] === current[0]+a && totalArr[c][1] === current[1]+b) {\n              open.push([current[0]+a, current[1]+b]);\n              totalArr.splice(c, 1);\n            }\n          }\n          \n        }\n      }\n\n\n      for (var f = 0; f < open.length; f++) {\n        if (open[f][0] === end[0] && open[f][1] === end[1]) {\n          close.push(end);\n          current = end;\n          execute = false;\n        }\n        else execute = true;\n      }\n\n\n\n      if (execute) {\n        \n        current = [];\n\n          for (var d = 0; d < open.length; d++) { \n            open[d].push(Math.abs(end[0] - open[d][0]) + Math.abs(end[1] - open[d][1]));\n\n            var min = [];\n            min.push(open[d][2]);\n\n            minmin = Math.min(...min);\n          }\n\n          for (var e = 0; e < open.length; e++) {\n            if (minmin === open[e][2]) {\n              if (current.length === 0) {\n                current.push(open[e][0], open[e][1]);\n                open = [];\n                close.push(current);\n              }\n            }\n          }\n\n          minmin = 0;\n      }\n\n    }\n    // loop end\n\n    console.log(totalArr);\n    console.log(current);\n    console.log(open);\n    console.log(close);\n  }\n\n  render() {\n\n    var boardInput = this.state.boardInput;\n    var pawnInput = this.state.pawnInput;\n\n    return (\n      <div>\n        <div>\n          <span className='title'>Board Size</span>\n          <input type='number' className='input marginRight' onChange={this.onInputChange.bind(this, 'board')} />\n          <span className='title'>Number of pawn</span>\n          <input type='number' className='input marginRight' onChange={this.onInputChange.bind(this, 'pawn')} />\n          {/* <button className=\"ui button\" onClick={() => this.onAddPawn(pawnInput)}>Enter</button> */}\n        </div>\n\n        <div id='pawnDiv'></div>\n\n        <canvas id=\"board\" />\n        <span><button id='visualize' className=\"ui button\" onClick={() => this.onVisualClick(this.state.pawnArrX, this.state.pawnArrY)}>Find Path</button></span>\n      </div>\n    );\n  }\n\n\n}\n\n\nexport default App;\n\n","C:\\Web\\ringle-chess\\src\\Test.js",["30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":181,"column":18,"nodeType":"37","messageId":"38","endLine":181,"endColumn":19},{"ruleId":"35","severity":1,"message":"39","line":182,"column":20,"nodeType":"37","messageId":"38","endLine":182,"endColumn":21},{"ruleId":"35","severity":1,"message":"36","line":188,"column":18,"nodeType":"37","messageId":"38","endLine":188,"endColumn":19},{"ruleId":"35","severity":1,"message":"39","line":189,"column":20,"nodeType":"37","messageId":"38","endLine":189,"endColumn":21},{"ruleId":"35","severity":1,"message":"36","line":195,"column":18,"nodeType":"37","messageId":"38","endLine":195,"endColumn":19},{"ruleId":"35","severity":1,"message":"39","line":196,"column":20,"nodeType":"37","messageId":"38","endLine":196,"endColumn":21},{"ruleId":"40","severity":1,"message":"41","line":293,"column":9,"nodeType":"37","messageId":"42","endLine":293,"endColumn":19},{"ruleId":"40","severity":1,"message":"43","line":294,"column":9,"nodeType":"37","messageId":"42","endLine":294,"endColumn":18},{"ruleId":"40","severity":1,"message":"44","line":2,"column":10,"nodeType":"37","messageId":"42","endLine":2,"endColumn":15},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-redeclare","'n' is already defined.","Identifier","redeclared","'m' is already defined.","no-unused-vars","'boardInput' is assigned a value but never used.","unusedVar","'pawnInput' is assigned a value but never used.","'clone' is defined but never used.","no-global-assign","no-unsafe-negation"]